
#Valid space definition of register type
#`reg` should have a color assigned
:space reg addr=32 word=64 type=register align=16 endian=big
#`other` should have a different color assigned
:space other addr=32 word=32 type=ro

#First define the entire SPR space
:reg SPR offset=0x1000 size=64 count=1024 name=spr%d
subfields={
    msb @(0-31)
    lsb @(32-63)
}

#VALID CASES
# can redirect the named spr9 (from spr%d)
# symbol reference `spr9` should be colored the same as `spr%d` and `reg`
:reg CTR redirect=spr9

# can redirect a subfield of spr22 (from spr%d)
# symbol references spr22 and lsb should have the same coloring as `spr%d` and `reg`
# the semicolon inside spr22;lsb should be highlighted as context operator
:reg DEC redirect=spr22;lsb

# ERROR CASES
# Should indicate field name is not available (only 1024 count which maxes at spr1023)
# Only spr1024 should be underlined and it shouldn't have a color
:reg NAME_NOT_DEFINED redirect=spr1024

# Should indicate subfield not available
# Only ;NDF should be underlined and it shouldn't be colored (spr22 should still be colored)
:reg SUBFIELD_NOT_DEFINED redirect=spr22;NDF

:other size=16 subfields={
    AA @(15) descr="Addressing mode (0=Relative, 1=Absolute)"
    opcd5 @(0-5) descr="Opcode (6bits)"
    overlap @(?1|5-8|4|0b00) descr="Field that overlaps with opcd5"
}

#VALID INSTRUCTIONS
# this instruction is valid
:other testinsn (overlap,AA) mask={opcd5=0b110110 AA=1} size=16

#this instruction is 32 bit (default space size) but is using size 16 fields, should be valid
#since 32 > 16.  NOTE: the name tag includes a . which should be valid
# Accessing spr22;lsb validly by first referencing the space using the $<spacetag> context operator
:other 32bitinsn. (overlap,AA) mask={opcd5=0b111 @(31)=1 $reg;spr22;lsb=1}

#INVALID
# ERR1 uses a field that's not defined in our space 'not_def' should be underlined.
# ERR2 opcd5 in the mask is checked against a valid binary number but the binary has too many
#bits!  the number should have a warning indicating there are more bits defined than the field has available.
# ERR3 AA is checked against 0b5 which is an invalid binary number.  0b5 should be underlined.
# ERR4 tries to reference a field name not defined in this space.  Needs to access that register
# by first naming the space then referencing the field `$reg;spr22;lsb

:other invinsn (not_def,AA) mask={opcd5=0b1111111 AA=0b5 spr22;lsb=1}
