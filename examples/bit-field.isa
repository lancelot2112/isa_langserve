# space definition
:space insn addr=32 word=32 type=ro

:insn size=32 subfields={
    #Valid bit fields
    AA?a @(30) op=func descr="Absolute Address flag, bit 30"
    BD @(16-29|0b00) op=imm descr="Displacement, bits 16-29, padded with 00b"
    SIMM @(?1|18-19|0b01) op=imm descr="Sign extended with 01b pad bits"
    rA @(11-15) op=insn.GPR descr="Register A, bits 11-15, is a GPR"
    opc6 @(0-5) op=func descr="Primary 6-bit opcode field, bits 0-5"
    ValidHex @(0x1f)
    ValidHex @(0x5-0x8)
    ValidOct @(0o4-0o9)

    #invalid bit fields
    INV1 @(3&) #invalid character `@`
    INV2 @(?2) #Invalid extension option (should be 0 or 1) `2` should be underlined
    INV3 @(11_15) #Invalid character (should be -)
    INV4 @ (31) #Space after @ (` ` should be underlined)
    INV5 @(22||23) #Extra `|` should be underlined
    INV6 @(22--23) #Extra `-` should be underlined
    INV7 @(33-35) #Numbers outside of class range 0-31
    INV8 @(25-50) #One valid bit number and one invalid `50` should be underlined
    INV9 @(0x20) #Outside of valid bti range hex version
    INV10 @(0o200) #outside valid bit range oct version
}